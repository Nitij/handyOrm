{"name":"HandyOrm","tagline":"A small javascript object library to provide easy binding between the view model and the data source.","body":"I have been working on some enterprise web applications for some time which happen to be very responsive and asynchronous in nature. While working on them I was always annoyed when I had to write so much boilerplate code for making asynchronous calls and passing data to the server. Although this process is already abstracted by using jQuery or some other in-house or third party libraries, still I felt something is missing. So this object library is my attempt and effort to make our lives further simpler. So I began working on this some time back(it has been week now at the time this page was initially written).\r\n\r\nThis object library is still in initial phase and I will be providing all the updates here.\r\n\r\n\r\nCheck out some ways in which this can be used:\r\n\r\n### Initialize the model and chain methods in any sequence:\r\n\r\n```\r\nvar myModel = null;\r\nmyModel = new ModelDef()\r\n              .modelName(\"MyModel\")\r\n              .serviceName(\"DataService\")\r\n              .methodName(\"ExecuteModelOperation\")\r\n              .columns([\"id\", \"name\", \"phone\", \"address\"]);\r\n```\r\n\r\nor call them individually according to your requirement:\r\n\r\n```\r\nmyModel.serviceName(\"DataService\");\r\nmyModel.columns([\"id\", \"name\", \"phone\", \"address\"]);\r\n```\r\n\r\n\r\n### Bind input DOM elements to the columns of our model:\r\n\r\n```\r\n<input ... model-name = \"MyModel\" model-column = \"id\" disabled = \"true\"/> <br />\r\n<input ... model-name = \"MyModel\" model-column = \"name\"/> <br />\r\n<input ... model-name = \"MyModel\" model-column = \"phone\"/> <br />\r\n```\r\n\r\n\r\n### When its time to make the asynchronous call to the server, you just need a single line:\r\n```\r\nmyModel.operation(\"Insert\", [\"name\", \"phone\", \"address\"], null).then(ReadRecords, handleError);\r\n...\r\nmyModel.operation(\"Update\", [\"id\", \"name\", \"phone\", \"address\"], null).then(ReadRecords, handleError);\r\n...\r\nmyModel.operation(\"Delete\", null, [{ col: \"id\", val: id}]).then(ReadRecords, handleError);\r\n```\r\n\r\n### Here is the summary of all the available functions:\r\n\r\n\r\n***\r\n\r\n**columnElementId(columnName):** Returns the id of the bound column passed.\r\n\r\n_columnName_: Name of the column, typeof String.\r\n\r\n***\r\n\r\n**lastOperation():** Returns the name of the last operation executed.\r\n\r\n***\r\n\r\nmodelName(name): Sets the model name.\r\n \r\n_name_: Name of the model.\r\n\r\n***\r\n\r\n**operation(operationType, boundValues, customValues):** Executes a single operation.\r\n\r\n_operationType_: Type of operation, usually a String.\r\n\r\n_boundValues_: Values to use which are in the DOM elements bound to the columns, in the form of [col1, col2, ...]:col1, col2 = typeof String.\r\n\r\n_customValues_: Custom values for columns, in the form of [{col:columnName, val:value}, ...].\r\n\r\n***\r\n\r\n**serviceName(name):** Sets the web service name to use.\r\n\r\n_name_: Name of the web service.\r\n\r\n***\r\n\r\n**methodName(name):** Sets the name of the web service method to call.\r\n\r\n_name_: Name of the web service method.\r\n\r\n***\r\n\r\n**clearFields(fields):** Clear the bound fields for those column names passed as a parameter.\r\n\r\n_fields_: Name of bound columns to be cleared in the form of [col1, col2, ...]:col1, col2 = typeof String.\r\n\r\n***\r\n\r\nYou can refer to the sample application code on github [here](https://github.com/Nitij/handyOrmSampleApplication).\r\n\r\n### Support or Contact\r\nMy website is still on the way so right now the only means to contact me is at nitij.jp@gmail.com and I'll definitely reply whenever I get free from feeding my dinosaurs.\r\n\r\nAlso each and everyone of you is most welcome to provide any suggestion/bug finding for the code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}